#+PROPERTY: header-args :tangle yes

This is my emacs config that is made of a melting pot of multiple sources.
 - [[https://github.com/alexmurray/dot_emacs.d][alexmurray/dot_emacs.d]] - for the main part
 - [[https://github.com/emacs-tw/awesome-emacs][emacs-tw/awesome-emacs]] - for the structure of this file
 - [[https://github.com/larstvei/dot-emacs][larstvei/dot-emacs]] - for the init.org converted to init.el

* Configurations

   #+BEGIN_SRC emacs-lisp :exports none
  ;;; init.el --- Starting point for Nicolas's Emacs Configuration

  ;;; Commentary:

  ;;; Code:
   #+END_SRC

** Meta

   All changes to the configuration should be done in =init.org=, *not* in
   =init.el=. Any changes in the =init.el= will be overwritten by saving
   =init.org=. The =init.el= in this repo should not be tracked by git, and
   is replaced the first time Emacs is started (assuming it has been renamed
   to =~/.emacs.d=).

   Emacs can't load =.org=-files directly, but =org-mode= provides functions
   to extract the code blocks and write them to a file. There are multiple
   ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
   could just use =org-babel-load-file=, but I had problems with
   byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
   but the git commits got a little messy. So here is a new approach.

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
     ;;; init.el --- Starting point for Nicolas Richart's Emacs Configuration

     ;;; Commentary:

     ;;; Code:

     ;; This file replaces itself with the actual configuration at first run.

     ;; We can't tangle without org!
     (require 'org)
     ;; Open the configuration
     (find-file (concat user-emacs-directory "init.org"))
     ;; tangle it
     (org-babel-tangle)
     ;; load it
     (load-file (concat user-emacs-directory "init.el"))
     ;; finally byte-compile it
     ;(byte-compile-file (concat user-emacs-directory "init.el"))

     (provide 'init)

     ;;; init.el ends here
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
   git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
   git update-index --no-assume-unchanged init.el
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
     (defun tangle-init ()
       "If the current buffer is 'init.org' the code-blocks are
     tangled, and the tangled file is compiled."
       (when (equal (buffer-file-name)
                    (expand-file-name (concat user-emacs-directory "init.org")))
         ;; Avoid running hooks when tangling.
         (let ((prog-mode-hook nil))
           (org-babel-tangle)
           ;;(byte-compile-file (concat user-emacs-directory "init.el"))
           )))

     (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     ;; prefer newer non-byte compiled sources to older byte compiled ones
     (setq load-prefer-newer t)

     ;; customisations
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     ;; load custom but ignore error if doesn't exist
     (load custom-file t)
   #+END_SRC
  
** Configuring the package system and bootstrapping use-package

   This configures the package system =built-in= Emacs. We need =use-package=
   for all the remaining configuration file so it has to be installed first

   #+BEGIN_SRC emacs-lisp
     ;;; Package management
     (require 'package)
     ;; we use use-package to do this for us
     (setq package-enable-at-startup nil)
     ;; use https for both melpa and gelpa if available
     (if (gnutls-available-p)
         (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                                  ("melpa" . "https://melpa.org/packages/")))
       (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                                ("melpa" . "http://melpa.org/packages/"))))

     (package-initialize)
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

     ;; uncomment to debug package loading times
     ;; (setq use-package-verbose t)

     ;; Bootstrap `use-package' from melpa
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))

   #+END_SRC

   We install the alert package for some nice notification of something goes
   wrong or is not installed properly

   #+BEGIN_SRC emacs-lisp
  (use-package alert
    :ensure t
    :init (when (eq system-type 'gnu/linux)
            (setq alert-default-style 'notifications)))

  (when (version< emacs-version "24.4")
    (alert "Emacs version too old - please run 24 or newer"
           :severity 'high))

   #+END_SRC

** General configuration

   This part contain the general configuration of the built-in parts of Emacs

   #+BEGIN_SRC emacs-lisp
     ;; For css-mode, temporarily.
     (defalias 'apropos-macrop 'macrop)

     ;; To be able to load the .dir-locals.el files
     (setq enable-local-variables :safe)

     ;; gpg preferences
     (setq epa-armor t)
     (setq epg-gpg-program "gpg2")

     ;; automatically garbage collect when switch away from emacs
     (add-hook 'focus-out-hook 'garbage-collect)

     ;; enable narrow-to-region
     (put 'narrow-to-region 'disabled nil)

     ;; set a reasonable fill and comment column
     (setq-default fill-column 79)
     (setq-default comment-column 78)

     ;; just use y or n not yes or no
     (defalias 'yes-or-no-p 'y-or-n-p)

     ;; inhibit startup message and splash screen
     (setq inhibit-startup-message t)
     ;; remove message from initial scratch buffer
     (setq initial-scratch-message nil)

     ;; Make Tab complete if the line is indented
     (setq tab-always-indent 'complete)

     ;; disable menu, tool and scroll-bars, show time
     ;; (menu-bar-mode 0)
     ;; (tool-bar-mode 0)
     (scroll-bar-mode 0)
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode 0))
     (display-time-mode 1)
     ;; Show line column numbers in mode line
     (line-number-mode 1)
     (column-number-mode 1)
     ;; Parent highlight
     (show-paren-mode 1)

     ;; Prefer space over tab
     (setq indent-tabs-mode nil)

     ;; Moves backup files in a different folder
     (defvar emacs-backup-directory
       (concat user-emacs-directory "backups/")
       "This variable dictates where to put backups.")

     (setq backup-directory-alist
           `((".*" . ,emacs-backup-directory)))

     ;; prompt when trying to switch out of a dedicated window
     (setq switch-to-buffer-in-dedicated-window 'prompt)

     ;; ensure scrolling forwards / backwards preserves original location such that
     ;; they undo each other
     (setq scroll-preserve-screen-position 'always)

     (defvar apm-preferred-font-height 100
       "Preferred font height to use.")

     (defun apm-graphic-frame-init ()
       "Initialise properties specific to graphical display."
       (interactive)
       (when (display-graphic-p)
         ; (apm-emoji-fontset-init)
         ;(spaceline-install t)
         (setq frame-title-format '(buffer-file-name "%f" ("%b")))
         ;; don't use gtk style tooltips so instead can use pos-tip etc
         (custom-set-variables
          '(x-gtk-use-system-tooltips nil))
         (tooltip-mode -1)
         (blink-cursor-mode -1)))

     ;; make sure graphical properties get set on client frames
     (add-hook 'server-visit-hook #'apm-graphic-frame-init)
     (apm-graphic-frame-init)

     (define-key key-translation-map [?\C-h] [?\C-?])

     ;; Use regex searches and replace by default.
     (global-set-key (kbd "C-s") 'isearch-forward-regexp)
     (global-set-key (kbd "C-r") 'isearch-backward-regexp)
     (global-set-key (kbd "M-%") 'query-replace-regexp)
     (global-set-key (kbd "C-M-s") 'isearch-forward)
     (global-set-key (kbd "C-M-r") 'isearch-backward)
     (global-set-key (kbd "C-M-%") 'query-replace)

     ;; Some global key binding
     (global-set-key (kbd "C-c ;") 'comment-region)
     (global-set-key (kbd "M-g") 'goto-line)
     ;; (global-set-key [f8] 'grep-find)
     (global-set-key [f8] 'my-revert-buffer)

     (defun my-corrector-mode()
     (interactive)
     (flyspell-mode 1)
     (flyspell-buffer)
     )

     (global-set-key [f5] 'my-corrector-mode) 


     ;; from http://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html
     (defun endless/fill-or-unfill ()
       "Like `fill-paragraph', but unfill if used twice."
       (interactive)
       (let ((fill-column
              (if (eq last-command 'endless/fill-or-unfill)
                  (progn (setq this-command nil)
                         (point-max))
                fill-column)))
         (call-interactively #'fill-paragraph)))

     (global-set-key [remap fill-paragraph] #'endless/fill-or-unfill)

     ;; general modes in text-mode or derived from
     (defun apm-text-mode-setup ()
       "Setup `text-mode' buffers."
       ;; use visual line mode to do soft word wrapping
       (visual-line-mode 1)

       (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
       
       ;; (visual-fill-column-mode 1)
       ;; and use adaptive-wrap to 'indent' paragraphs appropriately with visual-line-mode
       ;; (adaptive-wrap-prefix-mode 1) 
       ;; Enable flyspell
       (flyspell-mode 1)
       ;; give warning if words misspelled when typing
       (ispell-minor-mode 1))

     (add-hook 'text-mode-hook #'apm-text-mode-setup)
   #+END_SRC

* License
  The code I used for this configuration are under "Public License" or "GPLv3". This file is under "GPLv3" to be compatible with the strictest.

* List of packages to install and use
   #+BEGIN_QUOTE
  - [[Interface Enhancement]]
  - [[#navigation][Navigation]]
  - [[#visual][Visual]]
  - [[#project-management][Project management]]
  - [[#programming][Programming]]
    - [[#completion][Completion]]
    - [[#document][Document]]
    - [[#error-checking][Error Checking]]
  - [[#programming-language][Programming Language]]
    - [[#cc][C/C++]]
    - [[#python][Python]]
    - [[#emacs-lisp][Emacs lisp]]
    - [[#shell-scripts][Shell scripts]]
    - [[#web-development][Web Development]]
      - [[#javascript][JavaScript]]
  - [[#note][Note]]
    - [[#org-mode][Org-mode]]
  - [[#version-control][Version control]]
  - [[#integration][Integration]]
    - [[#console][Console]]
    - [[#continuous-integration][Continuous Integration]]
  - [[#text-edition][Text Edition]]
    - [[#markdown][Markdown]]
    - [[#latex][LaTeX]]
    - [[#pdf][PDF]]
  - [[#internet][Internet]]
    - [[#irc][IRC]]
  - [[#package-management][Package Management]]
  - [[#appearance][Appearance]]
    - [[#theme][Theme]]
   #+END_QUOTE

** Interface Enhancement
   - [[https://github.com/abo-abo/swiper][Ivy]] - flexible, simple tools for minibuffer completion in Emacs.
     - Ivy, a generic completion mechanism for Emacs.
     - Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
     - Swiper, an Ivy-enhanced alternative to isearch.
   - [[https://github.com/bbatsov/crux][crux]] - A Collection of Ridiculously Useful eXtensions for Emacs
   - [[https://github.com/nonsequitur/smex/][smex]] - A smart M-x enhancement for Emacs.
   #+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :commands (ivy-mode)
  :bind (("C-c C-r" . ivy-resume)
         ([remap switch-to-buffer] . ivy-switch-buffer))
  :init (progn
          (setq ivy-count-format ""
                ivy-display-style 'fancy)
          (ivy-mode 1)))

(use-package counsel
  :ensure t
  :bind (("M-y" . counsel-yank-pop)
         ("M-x" . counsel-M-x)
         ("C-x C-i" . counsel-imenu)
         ("C-x C-f" . counsel-find-file)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable))
  :init (progn
          (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
          (setq counsel-find-file-at-point t))
  )

(use-package crux
  :ensure t
  :bind (([remap move-beginning-of-line] . crux-move-beginning-of-line)
         ("C-c o" . crux-open-with)))

(use-package smex
  :ensure t
  :config (smex-initialize))
   #+END_SRC

** File Manager
   - [[http://www.emacswiki.org/emacs/DiredMode][Dired]] - =[built-in]= *Dir* ectory *Ed* itor. A customizable great file manager.

** Navigation
   - [[https://github.com/syohex/emacs-anzu][anzu]] - displays current match and total matches.
   - [[http://www.emacswiki.org/emacs/ImenuMode][imenu]] - =[built-in]= Menus for accessing locations in documents.

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :ensure t
  :diminish anzu-mode
  :init (global-anzu-mode)
  :bind (("M-%" . anzu-query-replace-regexp)
         ("C-M-%" . anzu-query-replace)))
#+END_SRC

** Visual
   - [[http://www.emacswiki.org/emacs/WhiteSpace][whitespace]] - =[built-in]= Visualize blanks (tab/space/newline).
   - [[http://emacsredux.com/blog/2014/08/25/a-peek-at-emacs-24-dot-4-prettify-symbols-mode/][prettify-symbol-mode]] - =[built-in]= displaying characters as fancy symbols (e.g. =lambda= -> =λ=)

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :diminish whitespace-mode
  :bind ([f3] . whitespace-cleanup)
  :config
  (defun show-whitespace ()
    "Show tabs and trailing white space."
    (if (not (eq major-mode 'Buffer-menu-mode))
        (setq font-lock-keywords
              (append font-lock-keywords
                      '(("^[\t]+"  (0 'tab-face t))
                        ("[ \t]+$" (0 'trailing-space-face t))
                        ("XXX" (0 'todo-face t))
                        ("TODO" (0 'todo-face t))
                        ("FIXME" (0 'todo-face t))
                        ("\\todo" (0 'todo-face t))
                        )))))
  (make-face 'tab-face)
  (make-face 'trailing-space-face)
  (make-face 'todo-face)
  (set-face-background 'tab-face "blue")
  (set-face-background 'trailing-space-face "blue")
  (set-face-foreground 'todo-face "green")
  (add-hook 'font-lock-mode-hook 'show-whitespace)
  (add-hook 'text-mode-hook 'font-lock-mode)
  )
#+END_SRC

** Project management
   - [[https://github.com/ericdanan/counsel-projectile][Counsel-projectile]] - Increase the integration of Ivy in Projectile
   - [[https://github.com/bbatsov/projectile][Projectile]] - Project Interaction Library for Emacs.
#   - [[https://github.com/sabof/project-explorer][Project-Explorer]] - a tree project explorer (integrates with projectile)

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :ensure t
  :init (counsel-projectile-mode))

(use-package projectile
  :ensure t
  :defer t
  :diminish projectile-mode
  :bind (("C-x C-m" . projectile-compile-project)
         ("C-x C-g" . projectile-find-file))
  :init (progn
          (setq projectile-enable-caching t)
          (projectile-mode))
  :config (progn
            (add-to-list 'projectile-project-root-files "configure.ac")
            (add-to-list 'projectile-project-root-files ".clang_complete")
            (add-to-list 'projectile-project-root-files ".clang_complete.in")
            (add-to-list 'projectile-project-root-files "AndroidManifest.xml")
            (with-eval-after-load 'ivy
              (setq projectile-completion-system 'ivy))))
#+END_SRC

** Programming
   - [[https://github.com/Malabarba/aggressive-indent-mode][Aggressive-indent]] - Keeps your code always indented automatically.
   - [[https://www.emacswiki.org/emacs/CompileCommand][compile]] - =[built-in]= Compile command default for =M-x compile=
   - [[http://doxymacs.sourceforge.net/][Doxymacs]] - Doxymacs is Doxygen + {X}Emacs.
   - [[https://www.emacswiki.org/emacs/ProgMode][prog-mode]] - =[built-in]= common to all programming modes
   - [[https://github.com/realgud/realgud][realgud]] - front-end to external debuggers
#   - [[https://github.com/purcell/whitespace-cleanup-mode][whitespace-cleanup-mode]] - Intelligently call whitespace-cleanup on save.
   - [[https://github.com/capitaomorte/yasnippet][YASnippets]] - Template system.

#+BEGIN_SRC emacs-lisp
;  (use-package aggressive-indent
;    :ensure t
;    :defer t
;    :diminish aggressive-indent-mode
;    :config (aggressive-indent-global-mode t))

  (use-package compile
    :bind ([f9] . recompile)
    ;; automatically scroll to first error on output
    :config (setq compilation-scroll-output 'first-error))

  (defun apm-doxymacs-setup()
    (doxymacs-mode)
    (doxymacs-font-lock)
    (setq doxymacs-doxygen-style "JavaDoc"))

  (use-package doxymacs
    :defer t
    :load-path "vendor/doxymacs"
    :commands (doxymacs-mode doxymacs-font-lock)
    :diminish doxymacs-mode
    :config (add-hook 'cc-mode-common-hook #'apm-doxymacs-setup)
    )

  (defun apm-prog-mode-setup ()
    "Tweaks and customisations for all programming modes."
    ;; turn on spell checking for strings and comments
    (flyspell-prog-mode)
    ;; highlight TODO etc in comments only
    ;;(fic-mode t)
    )

  (use-package prog-mode
    :config (progn
              (when (boundp 'prettify-symbols-unprettify-at-point)
                ;; show original text when point is over a prettified symbol
                (setq prettify-symbols-unprettify-at-point 'right-edge))
              ;; prettify symbols (turn lambda -> λ)
              (global-prettify-symbols-mode 1)
              (add-hook 'prog-mode-hook #'apm-prog-mode-setup)))

  (use-package realgud
    :ensure t)

  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config (yas-global-mode 1))

#+END_SRC

*** Completion
    - [[http://www.emacswiki.org/emacs/AbbrevMode][abbrev]] - =[built-in]= Abbreviation expander
    - [[https://company-mode.github.io/][Company]] - A text completion framework.
      - [[https://github.com/proofit404/company-anaconda][company-anaconda]] - anaconda back-end
      - [[https://github.com/alexeyr/company-auctex][company-auctex]] - auctex back-end
      - [[https://company-mode.github.io/][company-cmake]] - =[company-native]= cmake completion back-end
      - [[https://company-mode.github.io/][company-dabbrev]] - =[company-native]= dabbrev-like completion back-end
      - [[https://github.com/PythonNut/company-flx][company-flx]] - fuzzy matching using flx
      - [[https://github.com/Sarcasm/company-irony][company-irony]] - irony back-end for C/C++
      - [[https://github.com/hotpxl/company-irony-c-headers][company-irony-c-headers]] - irony backend for C/C++ headers
      - [[https://github.com/syohex/emacs-company-jedi][company-jedi]] - jedi back-end
      - [[https://github.com/vspinu/company-math][company-math]] - math back-end to use in LaTeX formulas
      - [[https://github.com/expez/company-quickhelp][company-quickhelp]] - documentation popups for company.
      - [[https://github.com/Alexander-Miller/company-shell][company-shell]] - back-end to compete shell scripts
      - [[https://github.com/company-mode/company-statistics][company-statistics]] - sorts candidates using completion history
      - [[https://github.com/proofit404/company-tern][company-tern]] - tern back-end
      - [[https://github.com/Wilfred/company-try-hard][company-try-hard]] - get completion from all back-ends
      - [[https://github.com/osv/company-web][company-web]] - Company version of ac-html, complete for web,html,emmet,jade,slim modes
    - [[https://github.com/lewang/flx][flx]] - Fuzzy matching for Emacs like Sublime Text.

#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :diminish abbrev-mode
  :config (progn
            (setq save-abbrevs t)
            (setq-default abbrev-mode t)))

(use-package company
  :ensure t
  :commands global-company-mode
  ;; Use Company for completion
  :bind (:map company-mode-map ([remap completion-at-point] . company-complete))
  :init (progn
          ;; set default lighter as nothing so in general it is not displayed
          ;; but will still be shown when completion popup is active to show the
          ;; backend which is in use
          (setq company-lighter-base "")
          (global-company-mode 1))
  :config (progn
            ;; some better default values
            (setq company-idle-delay 0.5)
            (setq company-tooltip-limit 10)
            (setq company-minimum-prefix-length 2)

            ;; align annotations in tooltip
            (setq company-tooltip-align-annotations t)

            ;; nicer keybindings
            (define-key company-active-map (kbd "C-n") 'company-select-next)
            (define-key company-active-map (kbd "C-p") 'company-select-previous)
            (define-key company-active-map (kbd "C-d") 'company-show-doc-buffer)

            (define-key company-active-map [tab] 'company-complete-common-or-cycle)
            (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)

            ;; put most often used completions at stop of list
            (setq company-transformers '(company-sort-by-occurrence))))

(use-package company-anaconda
  :ensure t
  :commands (company-anaconda)
  :after company
  :init (add-to-list 'company-backends #'company-anaconda))

(use-package company-auctex
  :ensure t
  ;; loaded in apm-latex-mode-setup
  :defer t)

(use-package company-dabbrev
  :after company
  ;; keep original case
  :config (setq company-dabbrev-downcase nil))

(use-package company-flx
  :ensure t
  :after company
  :init (company-flx-mode 1))

(use-package company-irony
  :ensure t
  :after company
  :init (add-to-list 'company-backends 'company-irony))

(use-package company-irony-c-headers
  :ensure t
  :after company
  :init (progn
          (setq company-irony-c-headers--compiler-executable
                (or (executable-find "clang++-5.0")
                    (executable-find "clang++")))
          ;; group with company-irony but beforehand so we get first pick
          (add-to-list 'company-backends '(company-irony-c-headers company-irony))))

(use-package company-jedi
  :ensure t
  :after company)

(use-package company-math
  :ensure t
  :defer t
  :after company
  ;; Add backend for math characters
  :init (progn
          (add-to-list 'company-backends 'company-math-symbols-unicode)
          (add-to-list 'company-backends 'company-math-symbols-latex)))

(use-package company-quickhelp
  :ensure t
  :defer t
  :init (add-hook 'company-mode-hook #'company-quickhelp-mode)
  :config (setq company-quickhelp-delay 0.1))

(use-package company-shell
  :ensure t
  :defer t
  :after company
  :init (add-to-list 'company-backends 'company-shell))

(use-package company-statistics
  :ensure t
  :after company
  :config (company-statistics-mode 1))

(use-package company-tern
  :ensure t
  :after company)

(use-package company-try-hard
  :ensure t
  :after company
  :config (progn
            (global-set-key (kbd "C-<tab>") #'company-try-hard)
            (define-key company-active-map (kbd "C-<tab>") #'company-try-hard)))

(use-package company-web
  :ensure t
  :defer t
  :after company
  :init (add-to-list 'company-backends 'company-web-html))

(use-package flx
  :ensure t)

#+END_SRC

*** Document
   - [[https://www.emacswiki.org/emacs/ElDoc][eldoc]] - =[built-in]= shows function arguments / variable doc in minibuffer when coding.
   - [[https://wiki.gnome.org/Apps/Devhelp][devhelp]] - Searches in =devhelp= for documentation

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish eldoc-mode
  :config (global-eldoc-mode 1))

(defun apm-devhelp-setup ()
  "Setup devhelp integration."
  (require 'devhelp)
  (local-set-key (kbd "<f2>") #'devhelp-toggle-automatic-assistant)
  (local-set-key (kbd  "<f1>") #'devhelp-assistant-word-at-point))

(use-package devhelp
  :load-path "vendor/"
  :defer t
  :init (add-hook 'c++-mode-hook #'apm-devhelp-setup))
#+END_SRC

*** Error Checking
    - [[https://github.com/flycheck/flycheck][Flycheck]] - Modern on-the-fly syntax checking meant to be a replacement to =FlyMake=
      - [[https://github.com/kumar8600/flycheck-clangcheck][flycheck-clangcheck]] - A Flycheck checker difinition for ClangCheck.
      - [[https://github.com/flycheck/flycheck][flycheck-flake8]] - =[flycheck-native]= checker for python using =flake8=
      - [[https://github.com/Sarcasm/flycheck-irony][flycheck-irony]] - Flycheck: C/C++ support via Irony
      - [[https://github.com/purcell/flycheck-package][flycheck-package]] - A Flycheck checker for elisp package authors
      - [[https://github.com/flycheck/flycheck-pos-tip][flycheck-pos-tip]] - Display Flycheck errors in GUI tooltips
      - [[https://github.com/flycheck/flycheck][flycheck-standard]] - =[flycheck-native]= checker for python using =standard.js=

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :config (progn
              (global-flycheck-mode 1)
              (setq flycheck-check-syntax-automatically '(save new-line)
                    flycheck-idle-change-delay 5.0
                    flycheck-display-errors-delay 0.9
                    flycheck-highlighting-mode 'symbols
                    flycheck-indication-mode 'left-fringe
                    ;; 'flycheck-fringe-bitmap-double-arrow
                    flycheck-standard-error-navigation t ; [M-g n/p]
                    flycheck-deferred-syntax-check nil
                    )))

  (use-package flycheck-clangcheck
    :ensure t
    :after flycheck
    )

  (use-package flycheck-irony
    :ensure t
    :after flycheck
    :config (progn
              (add-hook 'flycheck-mode-hook #'flycheck-irony-setup)
              (flycheck-add-next-checker 'irony '(warning . c/c++-cppcheck))))

  (use-package flycheck-clang-tidy
    :ensure t
    :after flycheck
    :config (progn
              (add-hook 'flycheck-mode-hook #'flycheck-clang-tidy-setup)
              (flycheck-add-next-checker 'c/c++-clang-tidy '(warning . irony))
              (setq flycheck-c/c++-clang-tidy-executable
                    (or (executable-find "clang-tidy-5.0")
                        (executable-find "clang-tidy")))))

  (use-package flycheck-package
    :ensure t
    :defer t
    :after flycheck
    :init (flycheck-package-setup))

  (use-package flycheck-pos-tip
    :ensure t
    :config (flycheck-pos-tip-mode 1))
#+END_SRC

** Programming Language
*** C/C++
    - [[http://cc-mode.sourceforge.net/][CC Mode]] - =[built-in]= An Emacs and XEmacs mode for editing C and other languages with similar syntax.
      - [[https://github.com/llvm-mirror/llvm/blob/master/utils/emacs/emacs.el][llvm coding style]] - llvm c-style for emacs used in =lisp/apm-c=
    - [[https://cmake.org/Wiki/CMake/Editors/Emacs][cmake-mode]] - =[included in cmake]= major-mode for editing CMake sources
    - [[https://github.com/Lindydancer/cmake-font-lock][cmake-font-lock]] - Enhanced font-lock rules for CMake.
    - [[https://www.emacswiki.org/emacs/CWarnMode][cwarn]] - =[built-in]= highlight suspicious C and C++ constructions
    - [[https://github.com/Sarcasm/irony-mode][irony-mode]] - A C/C++ minor mode for Emacs powered by libclang.
    - [[https://github.com/ikirill/irony-eldoc][irony-eldoc]] - irony-mode support for eldoc-mode
    - [[https://github.com/ludwigpacifici/modern-cpp-font-lock][modern-cpp-font-lock]] - Font-locking for "Modern C++"

#+BEGIN_SRC emacs-lisp
  ;; show #if 0 / #endif etc regions in comment face - taken from
  ;; http://stackoverflow.com/questions/4549015/in-c-c-mode-in-emacs-change-face-of-code-in-if-0-endif-block-to-comment-fa
  (defun c-mode-font-lock-if0 (limit)
    "Fontify #if 0 / #endif as comments for c modes etc.
  Bound search to LIMIT as a buffer position to find appropriate
  code sections."
    (save-restriction
      (widen)
      (save-excursion
        (goto-char (point-min))
        (let ((depth 0) str start start-depth)
          (while (re-search-forward "^\\s-*#\\s-*\\(if\\|else\\|endif\\)" limit 'move)
            (setq str (match-string 1))
            (if (string= str "if")
                (progn
                  (setq depth (1+ depth))
                  (when (and (null start) (looking-at "\\s-+0"))
                    (setq start (match-end 0)
                          start-depth depth)))
              (when (and start (= depth start-depth))
                (c-put-font-lock-face start (match-beginning 0) 'font-lock-comment-face)
                (setq start nil))
              (when (string= str "endif")
                (setq depth (1- depth)))))
          (when (and start (> depth 0))
            (c-put-font-lock-face start (point) 'font-lock-comment-face)))))
    nil)

  (use-package apm-c
    :load-path "lisp/"
    :commands (apm-c-mode-setup)
    :init (dolist (hook '(c-mode-hook c++-mode-hook))
            (add-hook hook 'apm-c-mode-setup)))

  ;; c-mode and other derived modes (c++, java etc) etc
  (defun apm-c-mode-common-setup ()
    "Tweaks and customisations for all modes derived from c-common-mode."
    (auto-fill-mode 1)
    ;; diminish auto-fill in the modeline
    (with-eval-after-load 'diminish
      (diminish 'auto-fill-function))
    ;; turn on auto-newline and hungry-delete
    ;; (c-toggle-auto-hungry-state t)
    ;; ensure fill-paragraph takes doxygen @ markers as start of new
    ;; paragraphs properly
    (setq paragraph-start "^[ ]*\\(//+\\|\\**\\)[ ]*\\([ ]*$\\|@param\\)\\|^\f")

    ;; show #if 0 / #endif etc regions in comment face
    (font-lock-add-keywords
     nil
     '((c-mode-font-lock-if0 (0 font-lock-comment-face prepend))) 'add-to-end))

  (use-package cc-mode
    :defer t
    :init (add-hook 'c-mode-common-hook #'apm-c-mode-common-setup))

  (use-package clang-format
    :ensure t
    :bind (:map c++-mode-map
                ([M-f12] . clang-format-buffer))
    :config
    (setq clang-format-executable
          (or (executable-find "clang-format-5.0")
              (executable-find "clang-format")))
    )

  (use-package cmake-mode
    :ensure t)

  (use-package cmake-font-lock
    :ensure t)

  (defun apm-irony-mode-setup ()
    "Setup irony-mode."
    (irony-cdb-autosetup-compile-options)
    (with-eval-after-load 'company-irony
      (company-irony-setup-begin-commands))
    (with-eval-after-load 'irony-eldoc
      (irony-eldoc)))

  ;; autogenerate a .clang_complete if there is an associated .clang_complete.in
  (defun apm-autogenerate-clang-complete ()
    "Autogenerate a .clang_complete if needed when opening a project."
    (when (and (fboundp 'projectile-project-root)
               ;; handle if not in project by returning nil
               (not (null (condition-case nil
                              (projectile-project-root)
                            (error nil))))
               (file-exists-p (concat (file-name-as-directory
                                       (projectile-project-root))
                                      ".clang_complete.in")))
      (projectile-with-default-dir (projectile-project-root)
        (shell-command "make .clang_complete"))))

  (defun apm-irony-cdb-clang-complete--auto-generate-clang-complete (command &rest args)
    "Try and autogenerate a .clang_complete (COMMAND ARGS are ignored)."
    (apm-autogenerate-clang-complete))

  ;; show suspicious c constructs automatically
  (use-package cwarn
    :diminish cwarn-mode
    :init (global-cwarn-mode 1))

  (use-package irony
    :ensure t
    :diminish irony-mode
    :commands (irony-mode)
    :bind (:map irony-mode-map ([remap completion-at-point] . irony-completion-at-point-async)
                ([remap complete-symbol] . irony-completion-at-point-async))
    :init (progn
            (advice-add 'irony-cdb-clang-complete :before 'apm-irony-cdb-clang-complete--auto-generate-clang-complete)
            (add-hook 'c-mode-hook 'irony-mode)
            (add-hook 'c++-mode-hook 'irony-mode)
            (add-hook 'irony-mode-hook 'apm-irony-mode-setup)))

  (use-package irony-eldoc
    :ensure t
    :defer t)

  (use-package modern-cpp-font-lock
    :ensure t
    :defer t
    :diminish modern-c++-font-lock-mode
    :init (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode))
#+END_SRC

*** Python
    - [[https://github.com/proofit404/anaconda-mode][anaconda-mode]] - Code navigation, documentation lookup and completion for Python.
    - [[http://millejoh.github.io/emacs-ipython-notebook/][ein]] - IPython notebook client for Emacs
    - [[https://github.com/jorgenschaefer/elpy][Elpy]] - An Emacs Python development environment.
    - [[https://github.com/tkf/emacs-jedi][Jedi]] - A Python auto-completion package.
    - [[https://github.com/dholm/swig-mode][swig]] - Major mode for swig files
    - yaml - Major mode for editing YAML files
#    - [[https://github.com/porterjamesj/virtualenvwrapper.el][virtualenvwrapper.el]] - Manage virtualenv from inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :diminish (anaconda-mode . " 🐍 ")
    ;; enable with apm-python-mode-setup below
    :defer t)

  (use-package ein
    :ensure t
    :config (add-hook 'ein:connect-mode-hook 'ein:jedi-setup))

                                          ;  (use-package elpy
                                          ;    :ensure t
                                          ;    :config (elpy-enable))

  (use-package jedi
    :ensure t)

  (defun apm-python-mode-setup ()
    "Tweaks and customisations for `python-mode'."
    (setq python-shell-interpreter "ipython3"
          python-shell-interpreter-args "--simple-prompt")
    (setq python-indent-offset 4)
    (add-to-list 'company-backends 'company-jedi)
    (anaconda-mode 1)
    (anaconda-eldoc-mode 1))

  (use-package python
    :defer t
    :init (add-hook 'python-mode-hook #'apm-python-mode-setup))

  (use-package swig-mode
    :load-path "vendor/"
    :mode "\\.i\\'"
    )

  (use-package yaml-mode
    :ensure t
    )
#+END_SRC

*** Emacs Lisp
     - [[https://www.emacswiki.org/emacs/InferiorEmacsLispMode][lisp-mode]] - =[built-in]= A simple Emacs Lisp REPL.
#+BEGIN_SRC emacs-lisp
(defun apm-emacs-lisp-mode-setup ()
  "Setup Emacs Lisp mode."
  (setq mode-name "🐮")
  ;; use aggressive indent
  ;; (aggressive-indent-mode 1)
  ;; (fic-mode 1)
  ;; make imenu list each package for easy navigation - from
  ;; https://github.com/jwiegley/use-package/issues/80#issuecomment-46687774
  (when (string= buffer-file-name (expand-file-name "init.el" "~/dot_emacs.d"))
    (add-to-list
     'imenu-generic-expression
     '("Packages" "^\\s-*(\\(use-package\\)\\s-+\\(\\(\\sw\\|\\s_\\)+\\)" 2))))

(use-package lisp-mode
  :config (add-hook 'emacs-lisp-mode-hook #'apm-emacs-lisp-mode-setup))

#+END_SRC

*** Web development
     - [[http://web-mode.org/][web-mode]] - major mode for editing various html templates (PHP, JSP, ASP, ERB...etc).
#+BEGIN_SRC emacs-lisp
(defun apm-web-mode-setup ()
  "Setup web mode."
  (setq mode-name ""))

(use-package web-mode
  :ensure t
  :commands web-mode
  :config (progn
            ;; use smartparens instead
            (setq web-mode-enable-auto-pairing nil)
            (add-hook 'web-mode-hook #'apm-web-mode-setup))
  :mode ("\\.php\\'" . web-mode))
#+END_SRC

**** Javascript
     - [[https://github.com/thomblake/js3-mode][js3-mode]] - Improved JavaScript editing mode.
     - [[http://ternjs.net/doc/manual.html#emacs][tern]] - Emacs flavor of the popular JavaScript analysis engine
     - [[https://github.com/joshwnj/json-mode][json-mode]] - Major mode for editing JSON files.

#+BEGIN_SRC emacs-lisp
  (use-package js3-mode
    :ensure t
    :defer t
    :mode ("\\.js\\'" . js3-mode)
    :init (progn
            (add-to-list 'company-backends 'company-tern)
            (add-hook 'js3-mode-hook
                      (lambda () (setq mode-name "js3"))))
    :config
    (setq js3-consistent-level-indent-inner-bracket t))

  (use-package tern
    :ensure t
    :config (add-hook 'js3-mode-hook (lambda () (tern-mode t))))

  (use-package json-mode
    :ensure t)
#+END_SRC

*** Shell Scripts
     - [[https://www.emacswiki.org/emacs/ShMode][sh-script]] - =[built-in]= Major mode for editing Unix and GNU/Linux shell script code.

#+BEGIN_SRC emacs-lisp
(use-package sh-script
  :init (setq-default sh-basic-offset 2
                      sh-indentation 2))
#+END_SRC

** Version control
   - [[https://magit.vc/][Magit]] - Interacting with git.
     - [[https://github.com/magit/git-modes][gitarrtibutes-mode]] - Major mode for editing .gitattributes files
     - [[https://github.com/magit/git-modes][gitconfig-mode]] - Major mode for editing .gitconfig files
     - [[https://github.com/magit/git-modes][gitignore-mode]] - Major mode for editing .gitignore files
     - [[https://github.com/llloret/gitolite-emacs][gl-conf-mode]] - Major mode for editing gitolite config files

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :bind ("C-x g" . magit-status))

(use-package gitconfig-mode
  :ensure t
  :defer t)

(use-package gitignore-mode
  :ensure t
  :defer t)

(use-package gl-conf-mode
  :load-path "vendor/gitolite-emacs"
  :mode  "gitolite\\.conf\\'"
  )
#+END_SRC

** Integration
*** Console
    - [[https://www.emacswiki.org/emacs/AnsiColor][ansi-color]] - =[built-in]= Translate ANSI escape sequences into faces
    - [[http://www.emacswiki.org/emacs/CategoryEshell][EShell]] - =[built-in]= A shell-like command interpreter implemented in Emacs Lisp.
    - [[http://www.emacswiki.org/emacs/AnsiTerm][Term]] - =[built-in]= A terminal emulator in Emacs.
    - [[http://www.emacswiki.org/emacs/download/multi-term.el][multi-term]] - Managing multiple terminal buffers in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package ansi-color
    ;; show colours correctly in shell
    :config (ansi-color-for-comint-mode-on))

  (defun apm-eshell-mode-setup ()
    "Initialise 'eshell-mode'."
    (setq mode-name ""))

  (use-package eshell
    :commands eshell
    :config (add-hook 'eshell-mode-hook #'apm-eshell-mode-setup))

  (defun netw-multiterm-mode-setup ()
    "Initialize 'multiterm-mode"
    (yas-minor-mode -1)
    (setq mode-name "")
    (setq show-trailing-whitespace nil))

  (use-package multi-term
    :ensure t
    :bind ("C-x m" . multi-term)
    :config
    (add-hook 'term-mode-hook #'netw-multiterm-mode-setup))
#+END_SRC

*** Continuous Integration
    - [[https://melpa.org/#/jenkins][jenkins]] - Minimalistic Jenkins client for Emacs
    - [[https://github.com/merickson/tracwiki-mode][tracwiki-mode]] - Emacs Major mode for working with Trac

#+BEGIN_SRC emacs-lisp
(use-package jenkins
  :ensure t
  :commands (jenkins)
  ;; don't set jenkins-api-token here - do it in custom.el so it is not checked
  ;; into git
  :config (setq jenkins-hostname "http://scitasadm.epfl.ch/jenkins/"
                jenkins-username 'user-login-name))

(use-package tracwiki-mode
  :ensure t
  :defer t
  :commands tracwiki
  :config (tracwiki-define-project
           "akantu"
           "https://lsmssrv1.epfl.ch/akantu-trac"))
#+END_SRC

** Text edition

*** Markdown
   - [[http://jblevins.org/projects/markdown-mode/][Markdown-mode]] - markdown-mode is a major mode for editing Markdown-formatted text files in GNU Emacs.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t
  :mode
  (("\\.md\\'" . markdown-mode)
   ("\\.markdown\\'" . markdown-mode))
  :config (progn
            (unless (executable-find markdown-command)
              (alert "markdown not found - is it installed?"))))
#+END_SRC

*** LaTeX
   - [[https://www.gnu.org/software/auctex/][AUCTeX]] - an extensible package for writing and formatting TeX files.
   - [[https://www.gnu.org/software/auctex/reftex.html][RefTeX]] - =[built-in]= Adds support for labels, references, citations, and index entries.

#+BEGIN_SRC emacs-lisp
(defun apm-latex-mode-setup ()
  "Tweaks and customisations for LaTeX mode."
  ;; smartparens latex support
  (use-package smartparens-latex)
  ;; Enable source-correlate for Control-click forward/reverse search.
  (TeX-source-correlate-mode 1)
  ;; enable math mode in latex
  (LaTeX-math-mode 1)
  ;; Enable reftex
  (turn-on-reftex)
  ;; integrate with company
  (company-auctex-init))

(use-package auctex
  :ensure t
  :defer t
  :mode ("\\.tex\\'" . LaTeX-mode)
  :init (progn
          (setq-default TeX-auto-save t)
          (setq-default TeX-parse-self t)
          (setq-default TeX-PDF-mode t)
          (setq-default TeX-master nil)
          (setq-default reftex-plug-into-AUCTeX t)
          (setq-default TeX-source-correlate-start-server t)

          (add-hook 'LaTeX-mode-hook #'apm-latex-mode-setup)))
#+END_SRC

*** PDF
   - [[https://github.com/politza/pdf-tools][PDF Tools]] - major mode for rendering PDF files, much better than DocView, and has much richer set of features

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  ;; only try and install when needed
  :mode ("\\.pdf\\'" . pdf-tools-install))
#+END_SRC

** Note
*** Org-mode
    - [[http://orgmode.org/][Org]] - =[built-in]= Write notes, GTD, authoring, publish and wash dishes.

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (progn
    (setq org-src-fontify-natively t)))
#+END_SRC

** Internet

# *** Mail
#      - [[http://www.emacswiki.org/emacs/CategoryGnus][Gnus]] - =[built-in]= Reading e-mail and Usenet news.
#      - [[http://www.emacswiki.org/emacs/MessageMode][Messages]] - =[built-in]= Composing and sending e-mail inside Emacs.
#      - [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] - An e-mail client for Emacs
#      - [[https://notmuchmail.org/][notmuch]] - A mail indexer which can serve as a complete client with its emacs integration
#      - [[http://www.emacswiki.org/emacs/WanderLust][Wanderlust]] - A powerful email and Usenet client for Emacs (IMAP4rev1, NNTP, POP(POP3/APOP), MH/Maildir)
#      - [[http://www.mew.org/en/][mew]] - A very easy to use e-mail reader and client for Emacs.

*** IRC
    - [[http://www.emacswiki.org/emacs/ERC][ERC]] - =[built-in]= A powerful, modular, and extensible IRC client.

#+BEGIN_SRC emacs-lisp
(defun apm-erc-alert (&optional match-type nick message)
  "Show an alert when nick mentioned with MATCH-TYPE NICK and MESSAGE."
  (if (or (null match-type) (not (eq match-type 'fool)))
      (let (alert-log-messages)
        (alert (or message (buffer-string)) :severity 'high
               :title (concat "ERC: " (or nick (buffer-name)))
               :data message))))

(use-package erc
  :defer t
  :config (progn
            (setq erc-nick "networms")
            ;; notify via alert when mentioned
            (add-hook 'erc-text-matched-hook 'apm-erc-alert)))

#+END_SRC
    
** Package Management
    - [[http://www.emacswiki.org/emacs/ELPA][package.el]] - =[built-in]= Install and manage Emacs packages easily.
      - [[https://github.com/Malabarba/paradox][paradox]] - Modernizing Emacs' Package Menu with package ratings, usage statistics, customizability & more.
    - [[https://github.com/jwiegley/use-package][use-package]] - A declaration macro to isolate package configuration in a way that is performance-oriented and tidy.
#    - [[https://github.com/rranelli/auto-package-update.el][auto-package-update.el]] - Automatically update Emacs packages.

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :ensure t
  :commands (paradox-list-packages)
  ;; don't bother trying to integrate with github
  :init (setq paradox-github-token nil))
#+END_SRC

** Appearance
   - [[https://github.com/TheBB/spaceline][spaceline]] - Powerline theme from [[https://github.com/syl20bnr/spacemacs][Spacemacs]].

   #+BEGIN_SRC emacs-lisp

(use-package spaceline-config           ; A beautiful mode line
  :ensure spaceline
  :init (setq spaceline-workspace-numbers-unicode t
              spaceline-window-numbers-unicode t)
  :config
  (spaceline-compile
   'lunaryorn
   ;; Left side of the mode line (all the important stuff)
   '(((buffer-modified buffer-size input-method) :face highlight-face)
     anzu
     '(buffer-id remote-host buffer-encoding-abbrev)
     ((point-position line-column buffer-position hud) :separator " | ")
     major-mode
     process
     (flycheck-error flycheck-warning flycheck-info)
     (python-pyvenv :fallback python-pyenv)
     ((which-function projectile-root) :separator " @ ")
     ((minor-modes :separator spaceline-minor-modes-separator) :when active))
   ;; Right segment (the unimportant stuff)
   '((workspace-number window-number)
     (battery :when active)
     (version-control :when active)))

  (setq-default mode-line-format '("%e" (:eval (spaceline-ml-lunaryorn)))))

(use-package powerline                  ; The work-horse of Spaceline
  :ensure t
  :after spaceline-config
  :config (progn
            (setq powerline-height (truncate (* 1.0 (frame-char-height))))
            (setq powerline-default-separator 'utf-8)))

;(use-package anti-zenburn-theme
;  :ensure t)

   #+END_SRC

** COMMENT Misc packages I did not know how to classify
   - [[http://elpa.gnu.org/packages/adaptive-wrap.html][adaptive-wrap]] - Smart line-wrapping with wrap-prefix
   - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Autorevert.html][autorevert]]
   - [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] - Set the visual line mode to wrap at fill-column size

   #+BEGIN_SRC emacs-lisp
     (use-package adaptive-wrap
       :ensure t)

     (use-package akantu-input
       :load-path "lisp/"
       :mode "\\.dat\\'"
       )

     (use-package autorevert
       :diminish auto-revert-mode
       :init (global-auto-revert-mode 1))

     (defun apm-coverlay-setup()
       (coverlay-mode 1))

     (use-package coverlay
       :ensure t
       :defer t
       :diminish coverlay-mode
       :config (add-hook 'c-mode-common-hook #'apm-coverlay-setup))

     (use-package delsel
       ;; enable delete-selection mode to allow replacing selected region
       ;; with new text automatically
       :init (delete-selection-mode 1))

     (use-package diff
       ;; default to unified diff
       :config (setq diff-switches "-u"))

     (use-package diff-hl
       :ensure t
       :init (progn
               (global-diff-hl-mode 1)
               ;; highlight in unsaved buffers as well
               (diff-hl-flydiff-mode 1)
               ;; Integrate with Magit
               (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
               ;; Highlight changed files in the fringe of dired
               (add-hook 'dired-mode-hook #'diff-hl-dired-mode)))

     (use-package diminish
       :ensure t)

     (use-package dts-mode
       :ensure t)

     ;; taken from http://kaushalmodi.github.io/2015/03/09/do-ediff-as-i-mean/
     (defun apm-ediff-dwim ()
       "Do ediff as I mean.

               If a region is active when command is called, call `ediff-regions-wordwise'.

               Else if the current frame has 2 windows,
               - Do `ediff-files' if the buffers are associated to files and the buffers
                 have not been modified.
               - Do `ediff-buffers' otherwise.

               Otherwise call `ediff-buffers' interactively."
       (interactive)
       (if (region-active-p)
           (call-interactively 'ediff-regions-wordwise)
         (if (= 2 (safe-length (window-list)))
             (let (bufa bufb filea fileb)
               (setq bufa  (get-buffer (buffer-name)))
               (setq filea (buffer-file-name bufa))
               (save-excursion
                 (other-window 1)
                 (setq bufb (get-buffer (buffer-name))))
               (setq fileb (buffer-file-name bufb))
               (if (or
                    ;; if either of the buffers is not associated to a file
                    (null filea) (null fileb)
                    ;; if either of the buffers is modified
                    (buffer-modified-p bufa) (buffer-modified-p bufb))
                   (progn
                     (message "Running (ediff-buffers \"%s\" \"%s\") .." bufa bufb)
                     (ediff-buffers bufa bufb))
                 (progn
                   (message "Running (ediff-files \"%s\" \"%s\") .." filea fileb)
                   (ediff-files filea fileb))))
           (call-interactively 'ediff-buffers))))

     (use-package ediff
       :defer t
       :config (setq ediff-window-setup-function 'ediff-setup-windows-plain
                     ediff-split-window-function 'split-window-horizontally))


     (defun makefile-tabs-are-less-evil ()
       "Disable ethan-wspace from caring about tabs in Makefile's."
       ;; silence byte-compilation warnings
       (eval-when-compile
         (require 'ethan-wspace))
       (setq ethan-wspace-errors (remove 'tabs ethan-wspace-errors)))

     (use-package ethan-wspace
       :ensure t
       :diminish ethan-wspace-mode
       :config (progn
                 ;; ethan-wspace-mode raises lots of warnings if this is enabled...
                 ;; hopefully this doesn't cause problems
                 (setq mode-require-final-newline nil)
                 ;; disable ethan-wspace caring about tabs in Makefile's
                 (add-hook 'makefile-mode-hook #'makefile-tabs-are-less-evil))
       :init (global-ethan-wspace-mode 1))

     (defun apm-make-underscore-word-character ()
       "Make _ a word character."
       (modify-syntax-entry ?_ "w"))

     (use-package eyebrowse
       :ensure t
       :config (progn
                 (eyebrowse-mode t)
                 ;; start a new workspace clean with just the scratch buffer
                 (setq eyebrowse-new-workspace t)
                 ;; wrap workspaces like vim
                 (setq eyebrowse-wrap-around t)))

     (use-package fic-mode
       :ensure t
       :defer t)

     ;; (use-package fill-column-indicator
     ;;   :ensure t
     ;;   :config (progn
     ;;             (define-global-minor-mode global-fci-mode fci-mode
     ;;               ;; only enable when buffer is not a special buffer (starts and
     ;;               ;; ends with an asterisk)
     ;;               (lambda () (if (not (string-match "^\*.*\*$" (buffer-name)))
     ;;                         (fci-mode 1))))
     ;;             (global-fci-mode 1)
     ;;             ;; make fci play nicely with company-mode - from https://github.com/alpaker/Fill-Column-Indicator/issues/54#issuecomment-218344694
     ;;             (with-eval-after-load 'company
     ;;               (defun on-off-fci-before-company(command)
     ;;                 (when (string= "show" command)
     ;;                   (turn-off-fci-mode))
     ;;                 (when (string= "hide" command)
     ;;                   (turn-on-fci-mode)))
     ;;               (advice-add 'company-call-frontends :before #'on-off-fci-before-company))))

     (use-package files
       :bind ("C-c r" . revert-buffer))

     (use-package flyspell
       :diminish flyspell-mode)

     (use-package flyspell-correct-ivy
       :ensure t
       :after ivy
       ;; use instead of ispell-word which evil binds to z=
       :bind (([remap ispell-word] . flyspell-correct-word-generic)))

     (use-package fuzzy
       :ensure t)

     (use-package gdb-mi
       :defer t
       :init (progn
               ;; use gdb-many-windows by default
               (setq gdb-many-windows nil)
               ;; Non-nil means display source file containing the main routine at startup
               (setq gdb-show-main t)))

     (use-package gud
       :defer t
       :init (add-hook 'gud-mode-hook #'gud-tooltip-mode))

     (use-package pcap-mode
       :ensure t
       :mode ("\\.pcapng\\'" . pcap-mode))

     ;; save minibuffer history
     (use-package savehist
       :init (savehist-mode 1))

     (use-package saveplace
       :config (progn
                 (setq-default save-place t)
                 (setq save-place-file (expand-file-name ".places" user-emacs-directory))))

     (use-package server-functions
       :load-path "lisp/"
       )

     (use-package unicode-fonts
       :ensure t
       :config (unicode-fonts-setup))

     (use-package uniquify
       :config (setq uniquify-buffer-name-style 'post-forward
                     uniquify-separator ":"
                     uniquify-after-kill-buffer-p t
                     uniquify-ignore-buffers-re "^\\*"))

     (use-package visual-fill-column
       :ensure t)

     (use-package web-beautify
       :ensure t
       )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp exports: none
     (provide 'init)
     ;;; init.el ends here

   #+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun spawn-gdb-mpi (env_file gdb_args)
    (let ((str 
           (with-temp-buffer
             (insert-file-contents env_file)
             (buffer-string))) lst)
      (setq lst (split-string str "\000"))
      (while lst
        (setq cur (car lst))
        (when (string-match "^\\(.*?\\)=\\(.*\\)" cur)
          (setq var (match-string 1 cur))
          (setq value (match-string 2 cur))
          (setenv var value))
        (setq lst (cdr lst))))
    (gdb gdb_args))
#+END_SRC
